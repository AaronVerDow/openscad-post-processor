#!/bin/bash
set -euo pipefail


CRE="$(echo -e '\r\033[K')"
RED="$(echo -e '\033[1;31m')"
GREEN="$(echo -e '\033[1;32m')"
YELLOW="$(echo -e '\033[1;33m')"
BLUE="$(echo -e '\033[1;34m')"
MAGENTA="$(echo -e '\033[1;35m')"
CYAN="$(echo -e '\033[1;36m')"
WHITE="$(echo -e '\033[1;37m')"
NORMAL="$(echo -e '\033[0;39m')"
export CRE RED GREEN YELLOW BLUE MAGENTA CYAN WHITE NORMAL

colorscheme="Tomorrow"


current_branch() {
    git rev-parse --abbrev-ref HEAD
}

print_load() {
    echo -n "Load average: " 1>&2
    cat /proc/loadavg 1>&2
}

fail() {
    echo "$RED$*$NORMAL" 1>&2
    exit 1
}

list_colors() {
    local file=$1
    grep -Po '(?<=color\().*(?=\))' "$file" | sort -u  | grep -v _color
}

process_all_comments() {
    local file=$1

    local module=""
    local no_hits=1
    while read -r line; do
        maybe=$( echo "$line" | grep -E '^\s*module ' | sed 's/\s*module\s*//' | grep -E -o '^[^(]*' ) || true
        [ -z "$maybe" ] || module="$maybe"
        echo "$line" | grep -q 'RENDER' || continue
        render=${line#*RENDER }   # delete everything leading up to RENDER
        filetype=${render/ *}     # keep first word
        args=""
        echo "$render" | grep -q " " && args=${render#* }
        if echo "$filetype" | grep -q '\.'; then
            # a dot in the name means a manual name was specified
            output=$filetype
            filetype=${output#*.}
        else
            # if only the filetype was passed autoatically generate a new name
            output="output/${file%.*}_$module.$filetype"
        fi

        if echo "$filetype" | grep -q "flatgif"; then
            build_flat_gif "$file" "$module" $( echo "$output" | sed 's/flatgif/gif/') "$args" &
            no_hits=0
            continue
        fi

        if echo "$filetype" | grep -q "gif"; then
            build_gif "$file" "$module" "$output" "$args" &
            no_hits=0
            continue
        fi

        if echo "$filetype" | grep -q "scad"; then
            build_scad "$file" "$module" "$output" "$args" &
            no_hits=0
            continue
        fi

        if [ "$filetype" == "obj" ]; then
            build_color "$file" "$module" "$output" "$args" &
            no_hits=0
            continue
        fi
        
        echo "building $output with from $file module $module ${args:+with optional args: }$args"
        build "$file" "$module" "$output" "$args" &
        no_hits=0
    done < <( tac "$file" )
    return $no_hits
}

build_color() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift
    blender="blender --background --python colorize_stl.py -- --outfile $output"
    while read -r color; do
        color_name=$( echo "$color" | grep -oi '[a-z]*' )
        color_file="${file%.*}_${module}_${color_name}.stl"
        
        build "$file" "$module" "$color_file" "$args -D COLOR=$color" || continue 

        blender="$blender --file $color_file --color $( eval echo "$color" )"
    done < <( list_colors "$file" )
    wait
    $blender
}

build_flat_gif() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift

    # disabled args for gif

    fps=$( echo "$args" | grep -o 'FPS [^ ]*' | grep -o '[0-9]*' || true )
    [ -z "$fps" ] && fps=15

    steps=$( echo "$@" | grep -o 'STEPS [^ ]*' | grep -o '[0-9]*' || true )
    [ -z "$steps" ] && steps=90

    delay=$( echo "100 / $fps" | bc -l )

    frames=$( mktemp -d )
    echo "Writing frames to $frames"

    # shellcheck disable=SC2068
    for step in $( seq 0 $steps ); do
        t=$( echo "1 / $steps * $step" | bc -l )
        if ! time $openscad --camera=0,0,0,0,0,0,0 --viewall --autocenter --colorscheme="$colorscheme" -o "$frames/frame_$step.png" -D"\$t=$t" <( use_module_fifo "$file" "$module" ); then
            echo "$output $step/$steps ${RED}failed$NORMAL"
            return 1
        fi
        echo "${GREEN}$output $step/$steps$NORMAL"
    done
    if ! convert $( /bin/find "$frames" -name '*.png' | sort --version-sort ) -set delay "$delay" "$output"; then
            echo "$output ${RED}failed$NORMAL"
            return 1
    fi
    echo "$output ${GREEN}OK$NORMAL"
}


build_gif() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift

    # disabled args for gif

    fps=$( echo "$args" | grep -o 'FPS [^ ]*' | grep -o '[0-9]*' || true )
    [ -z "$fps" ] && fps=15

    steps=$( echo "$@" | grep -o 'STEPS [^ ]*' | grep -o '[0-9]*' || true )
    [ -z "$steps" ] && steps=90

    delay=$( echo "100 / $fps" | bc -l )

    frames=$( mktemp -d )
    echo "Writing frames to $frames"

    # shellcheck disable=SC2068
    for step in $( seq 0 $steps ); do
        t=$( echo "1 / $steps * $step" | bc -l )
        if ! time $openscad --viewall --colorscheme="$colorscheme" -o "$frames/frame_$step.png" -D"\$t=$t" <( use_module_fifo "$file" "$module" ); then
            echo "$output $step/$steps ${RED}failed$NORMAL"
            return 1
        fi
        echo "${GREEN}$output $step/$steps$NORMAL"
    done
    if ! convert $( /bin/find "$frames" -name '*.png' | sort --version-sort ) -set delay "$delay" "$output"; then
            echo "$output ${RED}failed$NORMAL"
            return 1
    fi
    echo "$output ${GREEN}OK$NORMAL"
}


build_scad() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift

    output_dir=$( dirname "$output" )
    relative_file=$( realpath -m "$file" --relative-to="$output_dir" )

    # do not overwrite files
    [ -f "$output" ] && return 0
    use_module "$relative_file" "$module" "$*" >> "$output"
    echo "$output ${GREEN}OK$NORMAL"
    # git add $output
}

build() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift
    # shellcheck disable=SC2068
    if ! time $openscad --viewall --colorscheme="$colorscheme" -o "$output" <( use_module_fifo "$file" "$module" ) ${@:-}; then
        echo "$output ${RED}failed$NORMAL"
        return 1
    fi
    echo "$output ${GREEN}OK$NORMAL"
    # git add $output
}

build_global() {
    file=$1
    shift
    output=$1
    shift
    # shellcheck disable=SC2068
    if ! time $openscad --viewall --colorscheme="$colorscheme" -o "$output" "$file"  ${@:-}; then
        echo "$output ${RED}failed$NORMAL"
        return 1
    fi
    echo "$output ${GREEN}OK$NORMAL"
    # git add $output
}


process_one() {
    # generate a single stl and png
    output=${file//.scad/.stl}
    image="${output%.*}.png"
    build_global "$file" "$output"
    build_global "$file" "$image"
}

use_module_fifo() {
    local file=$1
    local module=$2
    use_module "$( readlink -f "$file" )" "$module"
}

use_module() {
    local file=$1
    shift
    local module=$1
    shift
    echo "use <$file>; $module($*);"
}

execute() {
    file=$1
    [ "$file" ] || fail "File not specified"
    [ "${2:-}" ] && fail "Too many options"
    [ -f "$file" ] || fail "File does not exist"
    echo "$file" | grep -q '\.scad$' || fail "Not an scad file"
    dir=$( dirname "$file" )
    out=$dir/output
    mkdir -p "$out"
    process_all_comments "$file" || process_one "$file" 
    wait
    # git commit -m "autogen outout"
    echo ""
}

main() {
    openscad="openscad"
    command -v $openscad &> /dev/null || openscad="openscad-nightly"
    command -v $openscad &> /dev/null || fail "Cound not find openscad"

    if [ "$1" ]; then
        execute "$1"
        return 
    fi
    #previous_commit
}

previous_commit() {
    for file in $( git diff-tree -r --name-only --no-commit-id HEAD HEAD~1 | grep 'scad$' ); do
        execute "$file"
    done
}

main "${@:-}"
